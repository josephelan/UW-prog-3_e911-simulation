/**
 * @file       EventGenerator.h
 * @brief
 *
 * @details
 *
 * @author     Joseph Lan
 * @date       23 February 2021
 *
 * CSS 343 D
 * Program #3 E911 Discrete Simulation
 * Prof. Stiber
 */
#pragma once

#include <iostream>
#include <vector>
#include <string>
#include <random>
#include <cmath>

#include "Event.h"

 /**
  * @brief
  */
class EventGenerator {
   public:

   // constructors

   /**
   * @brief    Initializes Event Generator object using the passed in parameters
   *           which symbolize the scenario environment. Creates generator,
   *           distribution, and using those objects, creates events and
   *           populates the scenarios events by calling helper functions
   *
   * @pre      n/a
   * @post     EventGenerator members initialized using passed inputs values
   *
   * @param    averageRealCallsPerHour avg # of calls/hr, for distrib
   * @param    averageReaclCallServiceTime avg service time, for distrib
   * @param    numBots number of bots
   *
   * Significant function calls:
   * initializeDistributions()
   * generateEvents()
   */
   EventGenerator(int averageRealCallsPerHour,
                  int averageRealCallServiceTime,
                  int numBots);

   // actions

   /**
   * @brief    Returns the vector of events generated by the EventGenerator
   *
   * @pre      n/a
   * @post     Returns the events (if any) generated by the EventGenerator
   *
   * @return   vector of Event objects
   *
   * Significant function calls:
   * n/a
   */
   std::vector<Event> getEvents() const;

   private:

   // members

   // vector of all the generated events
   std::vector<Event> events_;

   // generator object used to generate values
   std::default_random_engine generator_;

   // uniform distribution object for bot call place times
   std::uniform_int_distribution<int> botCallTimeDistribution_;

   // exponential distribution for legitimate call place time intervals
   std::exponential_distribution<double> realCallTimeDistribution_;

   // exponential distribution for legitimate call service times
   std::exponential_distribution<double> realCallServiceLengthDistribution_;

   //helpers

   /**
   * @brief    Generates events based on generator distributions
   *
   * @pre      n/a
   * @post     Event vector populated
   *
   * Significant function calls:
   * n/a
   */
   void generateEvents();

   /**
   * @brief    Initializes the scenario’s distributions
   *
   * @pre      Assumes member variables set properly by object initialization
   * @post     Object distribution members properly set
   *
   * @param    averageRealCallsPerHour avg # of calls/hr, for distrib
   * @param    averageReaclCallServiceTime avg service time, for distrib
   * @param    numBots
   *
   * Significant function calls:
   * n/a
   */
   void initializeDistributions(int averageRealCallsPerHour,
                                int averageRealCallServiceTime,
                                int numBots);

   /**
   * @brief    Returns true if the Event MINIMUM call time + service time will
   *           end within time 3600. Also, false if service time is 3600 or greater
   *
   * @pre      n/a
   * @post     No state change. Returns bool
   *
   * @param    event the event to check for validity
   *
   * @return   True if event min call time + service time <= 3600 seconds and
   *           service time <= 3600
   *
   * Significant function calls:
   * n/a
   */
   bool isValidEvent(Event& event) const;
};