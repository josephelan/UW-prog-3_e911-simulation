/**
 * @file       EventGenerator.h
 * @brief
 *
 * @details
 *
 * @author     Joseph Lan
 * @date       23 February 2021
 *
 * CSS 343 D
 * Program #3 E911 Discrete Simulation
 * Prof. Stiber
 */
#pragma once

#include <iostream>
#include <vector>
#include <string>
#include <random>
#include <cmath>

#include "Event.h"

 /**
  * @brief
  */
class EventGenerator {
   public:

   // constructors

   /**
   * @brief    Initializes Event Generator object using the passed in parameters
   *           which symbolize the scenario environment. Creates generator,
   *           distribution, and using those objects, creates events and
   *           populates the scenarios events by calling helper functions
   *
   * @pre      n/a
   * @post     EventGenerator members initialized using passed inputs values
   *
   * @param    averageRealCallsPerHour avg # of calls/hr, for distrib
   * @param    averageReaclCallServiceTime avg service time, for distrib
   * @param    numBots number of bots
   *
   * Significant function calls:
   * initializeDistributions()
   * generateEvents()
   */
   EventGenerator(int averageRealCallsPerHour,
                  int averageRealCallServiceTime,
                  int numBots);

   // actions

   /**
   * @brief    Returns the vector of events generated by the EventGenerator
   *
   * @pre      n/a
   * @post     Returns the events (if any) generated by the EventGenerator
   *
   * @return   vector of Event objects
   *
   * Significant function calls:
   * n/a
   */
   std::vector<Event> getEvents() const;

   private:

   // members

   // vector of all the generated events
   std::vector<Event> events_;

   // constant for average real calls per hour
   int averageRealCallsPerSecond_;

   // constant for average service time
   double lambdaC;

   // number of bots
   int numBots_;

   //helpers

   /**
   * @brief    Generates events based on generator distributions
   *
   * @pre      n/a
   * @post     Event vector populated
   *
   * @param    numBots the number of bots to create for this simulation
   *
   * Significant function calls:
   * getCallPlaceInterval()
   * getCallserviceTime()
   */
   void generateEvents();

   /**
   * @brief    set average real calls per second
   *
   * @pre      n/a
   * @post     set average real calls per second to per hour / 3600
   *
   * @param    average real calls per hour
   *
   * Significant function calls:
   * n/a
   */
   void setAverageRealCallsPerSecond(int averageRealCallsPerHour);

   /**
   * @brief    set lambdaC
   *
   * @pre      n/a
   * @post     set lambdaC, service rate by 1 / averageRealServiceTime
   *
   * @param    averageReaclCallServiceTime
   *
   * Significant function calls:
   * getCallPlaceInterval()
   * getCallserviceTime()
   */
   void setLamdaC(int averageRealCallServiceTime);
};