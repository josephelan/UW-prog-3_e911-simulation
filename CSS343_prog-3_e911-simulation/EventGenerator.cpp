/**
 * @file       EventGenerator.cpp
 * @brief
 *
 * @details
 *
 * @author     Joseph Lan
 * @date       23 February 2021
 *
 * CSS 343 D
 * Program #3 E911 Discrete Simulation
 * Prof. Stiber
 */
#include "EventGenerator.h"

 /**
 * @brief    Initializes Event Generator object using the passed in parameters
 *           which symbolize the scenario environment. Creates generator,
 *           distribution, and using those objects, creates events and
 *           populates the scenarios events by calling helper functions
 *
 * @pre      n/a
 * @post     EventGenerator members initialized using passed inputs values
 *
 * @param    averageRealCallsPerHour avg # of calls/hr, for distrib
 * @param    averageReaclCallServiceTime avg service time, for distrib
 * @param    numBots number of bots
 *
 * Significant function calls:
 * setAverageRealCallsPerSecond()
 * setLamdaC()
 * generateEvents()
 */
EventGenerator::EventGenerator(int averageRealCallsPerHour,
                               int averageRealCallServiceTime,
                               int numBots)
   : averageRealCallsPerSecond_(0),
   lambdaC(0),
   numBots_(numBots)
{
   // generate all the events based on input parameters for simulation run
   generateEvents();
}

/**
* @brief    Returns the vector of events generated by the EventGenerator
*
* @pre      n/a
* @post     Returns the events (if any) generated by the EventGenerator
*
* @return   vector of Event objects
*
* Significant function calls:
* n/a
*/
std::vector<Event> EventGenerator::getEvents() const
{
   return events_;
}

/**
* @brief    Generates events based on generator distributions
*
* @pre      n/a
* @post     Event vector populated
*
* @param    numBots the number of bots to create for this simulation
*
* Significant function calls:
* getCallPlaceInterval()
* getCallserviceTime()
*/
void EventGenerator::generateEvents()
{
   // create generator object for random values
   std::default_random_engine generator;

   // create uniform int distribution for bot call times
   std::uniform_int_distribution<int> botCallDistribution(1, 3600);

   int botCallTime = 0; // initialize variable for bot call times

   // iterate and generate bot events
   // invariant: 0 <= i < numBots
   for (int i = 0; i < numBots_; ++i) {
      botCallTime = botCallDistribution(generator);
      Event botEvent(false, true, botCallTime, 6);
      events_.push_back(botEvent);
   }

   // create exponential distribution for service time
   std::exponential_distribution<double> serviceTimeDistribution(lambdaC);

   // create exponential distribution for interval time
   std::exponential_distribution<double>
      realCallInterval(averageRealCallsPerSecond_);

   // integer for service time iteration
   int serviceTime = int(ceil(serviceTimeDistribution(generator)));

   // First real call
   Event firstRealEvent(true, true, 0, serviceTime);
   events_.push_back(firstRealEvent);

   // track active time for simulation

   // interval for next event call place
   int interval = realCallInterval(generator);
   int time = 0 + interval; // update time for next call time

   // iterate and generate real events
   // invariant: 0 <= i < number of calls which add up time to 3600
   while (time <= 3600) {

      // update service time
      serviceTime = int(ceil(serviceTimeDistribution(generator)));

      // update interval
      interval = realCallInterval(generator);

      Event realEvent(true, true, time, serviceTime); // next real event
      events_.push_back(realEvent); // enqueue next real event

      time += interval; // update real time
   }
}

/**
* @brief    set average real calls per second
*
* @pre      n/a
* @post     set average real calls per second to per hour / 3600
*
* @param    average real calls per hour
*
* Significant function calls:
* n/a
*/
void EventGenerator::setAverageRealCallsPerSecond(int averageRealCallsPerHour)
{
   averageRealCallsPerSecond_ = averageRealCallsPerHour / 3600;
}

/**
* @brief    set lambdaC
*
* @pre      n/a
* @post     set lambdaC, service rate by 1 / averageRealServiceTime
*
* @param    averageReaclCallServiceTime
*
* Significant function calls:
* getCallPlaceInterval()
* getCallserviceTime()
*/
void EventGenerator::setLamdaC(int averageRealCallServiceTime)
{
   lambdaC = 1 / averageRealCallServiceTime;
}